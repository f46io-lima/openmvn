image: gcr.io/kaniko-project/executor:latest

variables:
  DOCKER_BUILDKIT: 1
  CI_BUILD_CONTEXT: $CI_PROJECT_DIR
  CI_DOCKERFILE: $CI_PROJECT_DIR/Dockerfile
  # Testcontainers settings
  TESTCONTAINERS_RYUK_DISABLED: "true"
  TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE: "/var/run/docker.sock"

stages:
  - build
  - verify-images
  - test
  - integration-test

before_script:
  - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

build_services:
  stage: build
  script:
    - |
      for svc in amf smf ocs upf bss imsi-manager imsi-switch-receiver; do
        echo "üì¶ Building and pushing $svc with Kaniko..."
        /kaniko/executor \
          --context "$CI_PROJECT_DIR/$svc" \
          --dockerfile "$CI_PROJECT_DIR/$svc/Dockerfile" \
          --destination "$CI_REGISTRY_IMAGE/$svc:$CI_COMMIT_SHA" \
          --destination "$CI_REGISTRY_IMAGE/$svc:latest" \
          --cache=true \
          --cache-ttl=24h \
          --push-retry=3
      done
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request"
      when: manual

verify_images:
  stage: verify-images
  image: docker:24.0.2
  services:
    - name: docker:24.0.2-dind
      alias: docker
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache curl jq
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - |
      for svc in amf smf ocs upf bss imsi-manager imsi-switch-receiver; do
        echo "üîç Verifying $svc image..."
        
        # Check if image exists and is accessible
        if ! docker pull "$CI_REGISTRY_IMAGE/$svc:$CI_COMMIT_SHA"; then
          echo "‚ùå Failed to pull $svc:$CI_COMMIT_SHA"
          exit 1
        fi
        
        # Verify image metadata
        image_info=$(docker inspect "$CI_REGISTRY_IMAGE/$svc:$CI_COMMIT_SHA")
        if ! echo "$image_info" | jq -e '.[0].Config.Cmd != null'; then
          echo "‚ùå Invalid image metadata for $svc"
          exit 1
        fi
        
        echo "‚úÖ $svc image verified successfully"
      done
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request"
      when: manual

unit_tests:
  stage: test
  image: golang:1.21
  variables:
    # Disable testcontainers for unit tests
    TESTCONTAINERS_DISABLED: "true"
  script:
    - |
      for svc in amf smf ocs upf bss imsi-manager imsi-switch-receiver; do
        echo "üß™ Running unit tests for $svc..."
        cd $svc
        go mod tidy
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        # Upload coverage report
        curl -s https://codecov.io/bash | bash -s -- -f coverage.txt -t $CODECOV_TOKEN
        cd ..
      done
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/coverage.txt"

integration_tests:
  stage: integration-test
  image: golang:1.21
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache docker-cli
    - go install github.com/codecov/codecov-go@latest
  script:
    - |
      for svc in imsi-manager imsi-switch-receiver; do
        echo "üîç Running integration tests for $svc..."
        cd $svc
        go mod tidy
        go test -v -tags=integration -race -coverprofile=coverage.integration.txt -covermode=atomic ./...
        # Upload integration coverage report
        curl -s https://codecov.io/bash | bash -s -- -f coverage.integration.txt -t $CODECOV_TOKEN
        cd ..
      done
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/coverage.integration.txt"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request"
      when: manual
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
