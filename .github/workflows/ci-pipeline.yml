name: CI Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:

env:
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  REDIS_ADDR: redis:6379
  NATS_URL: nats://nats:4222
  TESTCONTAINERS_RYUK_DISABLED: true
  TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE: "/var/run/docker.sock"
  GO_VERSION: '1.21'
  GO_TEST_FLAGS: "-v -race -coverprofile=coverage.txt -covermode=atomic"
  GO_TEST_TIMEOUT: "10m"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Docker Compose Build
        run: docker-compose build

  unit_tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      nats:
        image: nats:2.10.11-alpine
        ports:
          - 4222:4222
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Run Unit Tests
        run: |
          set -e
          if [ ! -f go.work ]; then
            go work init
            go work use .
            for svc in amf smf ocs upf bss udm imsi-switch-receiver gnb-sim; do
              if [ -d "$svc" ]; then
                go work use ./$svc
              fi
            done
          fi
          FAILED=0
          for svc in amf smf ocs upf bss udm imsi-switch-receiver gnb-sim; do
            if [ -d "$svc" ]; then
              echo "Testing $svc..."
              cd $svc
              go mod tidy
              if ! (cd .. && go test $GO_TEST_FLAGS ./$svc/... | tee $svc/test_output.log); then
                echo "Tests failed in $svc"
                FAILED=1
              fi
              cd ..
            fi
          done
          exit $FAILED
      - name: Upload Test Logs
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-logs
          path: '**/test_output.log'

  integration_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Docker CLI and Codecov
        run: |
          sudo apt-get update
          sudo apt-get remove -y containerd docker docker-engine docker.io containerd.io runc || true
          sudo apt-get install -y docker.io
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          sudo mv codecov /usr/local/bin/
      - name: Run Integration Tests
        run: |
          cd integration_test
          go mod tidy
          go get github.com/free5gc/go-upf@latest
          go mod tidy
          go test $GO_TEST_FLAGS -timeout $GO_TEST_TIMEOUT ./...
          if [ -f coverage.integration.txt ]; then
            codecov -f coverage.integration.txt -t ${{ secrets.CODECOV_TOKEN }}
